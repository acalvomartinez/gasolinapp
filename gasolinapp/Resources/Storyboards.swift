//
//  Storyboards.swift
//  chicfy
//
//  Generated by SwiftGen with storyboards-swift4.stencil on 06/02/2018.
//  Copyright Â© 2018 chicfy s.l. All rights reserved.
//

import UIKit

protocol StoryboardType {

  static var storyboardName: String {
    get
  }
}

extension StoryboardType {

  static var storyboard: UIStoryboard {
    let name = self.storyboardName
    return UIStoryboard(name: name, bundle: Bundle(for: BundleToken.self))
  }
}

struct SceneType<T: Any> {
  let storyboard: StoryboardType.Type
  let identifier: String

  func instantiate() -> T {
    guard let controller = storyboard.storyboard.instantiateViewController(withIdentifier: identifier) as? T else {
      fatalError("ViewController '\(identifier)' is not of the expected class \(T.self).")
    }

    return controller
  }
}

struct InitialSceneType<T: Any> {
  let storyboard: StoryboardType.Type

  func instantiate() -> T {
    guard let controller = storyboard.storyboard.instantiateInitialViewController() as? T else {
      fatalError("ViewController is not of the expected class \(T.self).")
    }

    return controller
  }
}

protocol SegueType: RawRepresentable {

}

extension UIViewController {

  func perform<S: SegueType>(segue: S, sender: Any? = nil) where S.RawValue == String {
    let identifier = segue.rawValue
    performSegue(withIdentifier: identifier, sender: sender)
  }
}

enum StoryboardScene {
  enum LaunchScreen: StoryboardType {
    static let storyboardName = "LaunchScreen"
    static let initialScene = InitialSceneType<UIViewController>(storyboard: LaunchScreen.self)
  }

  enum Main: StoryboardType {
    static let storyboardName = "Main"
    static let initialScene = InitialSceneType<gasolinapp.ViewController>(storyboard: Main.self)
    static let testViewController = SceneType<UIViewController>(storyboard: Main.self, identifier: "TestViewController")
    static let viewController = SceneType<gasolinapp.ViewController>(storyboard: Main.self, identifier: "ViewController")
  }

}

enum StoryboardSegue {
}

private final class BundleToken {

}
