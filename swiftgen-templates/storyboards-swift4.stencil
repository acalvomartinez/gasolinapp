//
//  Storyboards.swift
//  chicfy
//
//  Generated by SwiftGen with storyboards-swift4.stencil on 06/02/2018.
//  Copyright Â© 2018 chicfy s.l. All rights reserved.
//

import UIKit
{% for module in modules where module != env.PRODUCT_MODULE_NAME and module != param.module %}
import {{module}}
{% endfor %}

{# This first part of the code is static, same every time whatever Storyboard you have #}
protocol StoryboardType {

  static var storyboardName: String {
    get
  }
}

extension StoryboardType {

  static var storyboard: UIStoryboard {
    let name = {% if isAppKit %}NSStoryboard.Name({% endif %}self.storyboardName{% if isAppKit %}){% endif %}
    return UIStoryboard(name: name, bundle: Bundle(for: BundleToken.self))
  }
}

struct SceneType<T: Any> {
  let storyboard: StoryboardType.Type
  let identifier: String

  func instantiate() -> T {
    guard let controller = storyboard.storyboard.instantiateViewController(withIdentifier: identifier) as? T else {
      fatalError("ViewController '\(identifier)' is not of the expected class \(T.self).")
    }

    return controller
  }
}

struct InitialSceneType<T: Any> {
  let storyboard: StoryboardType.Type

  func instantiate() -> T {
    guard let controller = storyboard.storyboard.instantiateInitialViewController() as? T else {
      fatalError("ViewController is not of the expected class \(T.self).")
    }

    return controller
  }
}

protocol SegueType: RawRepresentable {

}

extension UIViewController {

  func perform<S: SegueType>(segue: S, sender: Any? = nil) where S.RawValue == String {
    let identifier = {% if isAppKit %}NSStoryboardSegue.Identifier({% endif %}segue.rawValue{% if isAppKit %}){% endif %}
    performSegue{% if isAppKit %}?{% endif %}(withIdentifier: identifier, sender: sender)
  }
}

{# This is where the generation begins, this code depends on what you have in your Storyboards #}
{% set sceneEnumName %}{{param.sceneEnumName|default:"StoryboardScene"}}{% endset %}
{% macro className scene %}{% filter removeNewlines %}
  {% if scene.customClass %}
    {% if scene.customModule %}
      {% if not param.ignoreTargetModule or scene.customModule != env.PRODUCT_MODULE_NAME and scene.customModule != param.module %}
        {{scene.customModule}}.
      {% endif %}
    {% endif %}
    {{scene.customClass}}
  {% else %}
    UI{{scene.baseType}}
  {% endif %}
{% endfilter %}{% endmacro %}
enum {{sceneEnumName}} {
  {% for storyboard in storyboards %}
  {% set storyboardName %}{{storyboard.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}{% endset %}
  enum {{storyboardName}}: StoryboardType {
    static let storyboardName = "{{storyboard.name}}"
    {% if storyboard.initialScene %}
    {% set sceneClass %}{% call className storyboard.initialScene %}{% endset %}
    static let initialScene = InitialSceneType<{{sceneClass}}>(storyboard: {{storyboardName}}.self)
    {% endif %}
    {% for scene in storyboard.scenes %}
    {% set sceneID %}{{scene.identifier|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endset %}
    {% set sceneClass %}{% call className scene %}{% endset %}
    static let {{sceneID}} = SceneType<{{sceneClass}}>(storyboard: {{storyboardName}}.self, identifier: "{{scene.identifier}}")
    {% endfor %}
  }

  {% endfor %}
}

enum {{param.segueEnumName|default:"StoryboardSegue"}} {
  {% for storyboard in storyboards where storyboard.segues %}
  enum {{storyboard.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}: String, SegueType {
    {% for segue in storyboard.segues %}
    {% set segueID %}{{segue.identifier|swiftIdentifier:"pretty"|lowerFirstWord}}{% endset %}
    case {{segueID|escapeReservedKeywords}}{% if segueID != segue.identifier %} = "{{segue.identifier}}"{% endif %}
    {% endfor %}
  }
  {{sp}}

  {% endfor %}
}

private final class BundleToken {

}
