//
//  Strings.swift
//  chicfy
//
//  Generated by SwiftGen with structured-swift4.stencil on 06/02/2018.
//  Copyright Â© 2018 chicfy s.l. All rights reserved.
//
{% if tables.count > 0 %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
import Foundation
{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    _ param{{forloop.counter}}: {{type}}? = nil{% if not forloop.last %}, {% endif %}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    param{{forloop.counter}}{% if not forloop.last %}, {% endif %}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsNilBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    let param{{forloop.counter}} = param{{forloop.counter}}{% if not forloop.last %}, {% endif %}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item sp %}
{{sp}}  {% for string in item.strings %}

{{sp}}  {% if not param.noComments %}
{{sp}}  {% endif %}
{{sp}}  {% if string.types %}
{{sp}}  {{accessModifier}} static func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> String {
{{sp}}    if {% call argumentsNilBlock string.types %} {
{{sp}}      return {{enumName}}.translate("{{string.key}}", "{{table}}", {% call argumentsBlock string.types %})
{{sp}}    } else {
{{sp}}      return {{enumName}}.localizable("{{string.key}}", "{{table}}")
{{sp}}    }
{{sp}}  }
{{sp}}  {% else %}
{{sp}}  {{accessModifier}} static let {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{enumName}}.translate("{{string.key}}", "{{table}}")
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{{sp}}  {% for child in item.children %}

{{sp}}  {{accessModifier}} enum {{child.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
{{sp}}    {% set sp2 %}{{sp}}  {% endset %}
{{sp}}    {% call recursiveBlock table child sp2 %}
{{sp}}  }
{{sp}}  {% endfor %}

  internal static func plural(_ localizable: String, _ number: Int) -> String {
    return L10n.translatePlural(localizable, number)
  }
{% endmacro %}

{% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
{{accessModifier}} enum {{enumName}} {
  {% if tables.count > 1 %}
  {% for table in tables %}
  {{accessModifier}} enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
  	{% call recursiveBlock table.name table.levels "  " %}
  }
  {% endfor %}
  {% else %}
  {% call recursiveBlock tables.first.name tables.first.levels "" %}
  {% endif %}
}

extension {{enumName}} {
  private static func translate(_ key: String, _ table: String, _ args: CVarArg...) -> String {
    let format = NSLocalizedString(key, tableName: table, bundle: Bundle(for: BundleToken.self), comment: "")
    return String(format: format, locale: Locale.current, arguments: args)
  }

  private static func translatePlural(_ localizable: String, _ number: Int) -> String {
    return String.localizedStringWithFormat(localizable, number)
  }

  static func localizable(_ key: String, _ table: String = "Localizable") -> String {
    return NSLocalizedString(key, tableName: table, bundle: Bundle(for: BundleToken.self), comment: "")
  }
}

private final class BundleToken {}
{% else %}
// No string found
{% endif %}
