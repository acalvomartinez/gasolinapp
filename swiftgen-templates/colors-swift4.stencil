//
//  Color.swift
//  chicfy
//
//  Generated by SwiftGen with color-swift4.stencil on 06/02/2018.
//  Copyright Â© 2018 chicfy s.l. All rights reserved.
//

{% if palettes %}
{% set colorAlias %}{{param.colorAliasName|default:"Color"}}{% endset %}
{% set enumName %}{{param.enumName|default:"Color"}}{% endset %}
import UIKit.UIColor

extension UIColor {

  convenience init(rgbaValue: UInt32) {
    let red   = CGFloat((rgbaValue >> 24) & 0xff) / 255.0
    let green = CGFloat((rgbaValue >> 16) & 0xff) / 255.0
    let blue  = CGFloat((rgbaValue >> 8) & 0xff) / 255.0
    let alpha = CGFloat((rgbaValue) & 0xff) / 255.0

    self.init(red: red, green: green, blue: blue, alpha: alpha)
  }

  convenience init(named color: {{enumName}}) {
    self.init(rgbaValue: color.rgbaValue)
  }

  func withAlpha(_ alpha: CGFloat = 1.0) -> UIColor {
    return withAlphaComponent(alpha)
  }
}

struct {{enumName}} {

  let rgbaValue: UInt32
  var color: UIColor {
    return UIColor(named: self)
  }

{% macro rgbaValue color %}0x{{color.red}}{{color.green}}{{color.blue}}{{color.alpha}}{% endmacro %}
{% macro enumBlock colors sp %}
{{sp}}  {% for color in colors %}
{{sp}}  static let {{color.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{enumName}}(rgbaValue: {% call rgbaValue color %}).color
{{sp}}  {% endfor %}
{% endmacro %}
{% macro switchBlock colors sp %}
{{sp}}static func color(named name: String) -> UIColor {
{{sp}}  switch name {
{{sp}}  {% for color in colors %}
{{sp}}  case "{{color.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}":
{{sp}}    return {{enumName}}.{{color.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}
{{sp}}  {% endfor %}
{{sp}}  default:
{{sp}}    return Color.dark
{{sp}}  }
{{sp}}}
{% endmacro %}
  {% if palettes.count > 1 %}
  {% for palette in palettes %}
  enum {{palette.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% call enumBlock palette.colors "  " %}
  }
  {% endfor %}
  {% else %}
  {% call enumBlock palettes.first.colors "" %}
  {% endif %}

  {% for palette in palettes %}
    {% call switchBlock palette.colors "  " %}
  {% endfor %}
}
{% else %}
// No color found
{% endif %}
